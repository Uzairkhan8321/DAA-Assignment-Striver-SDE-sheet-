struct Node {
    Node* child[2];

    bool containsKey(int bit) {
        return (child[bit] != NULL); // checks if this bit is present or not
    }

    void put(int bit, Node* node) {
        child[bit] = node;
    }

    Node* get(int bit) {
        return child[bit];
    }
};

class Trie {
private:
    Node* root;

public:
    Trie() {
        root = new Node();
    }

    void insert(int num) {
        Node* node = root;
        for(int i=31 ; i>=0 ; i--) {
            int bit = (num>>i) & 1;
            if(!node->containsKey(bit)) {
                node->put(bit,new Node());
            }
            node = node->get(bit);
        }
    }

    int getMax(int num) {
        Node* node = root;
        int maxNum = 0;

        for(int i=31 ; i>=0 ; i--) {
            int bit = (num>>i) & 1;
            if(node->containsKey(1-bit)) {
                maxNum = maxNum | (1<<i);
                node = node->get(1-bit);
            }
            else {
                node = node->get(bit);
            }
        }
        return maxNum;
    }
};

class Solution {
public:
    static bool cmp(vector<int> &a, vector<int> &b) {
        return a[1]<b[1];
    }

    vector<int> maximizeXor(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> ans(queries.size(),0);
        sort(begin(nums),end(nums));
        
        vector<vector<int>> offlineQueries;
        for(int i=0 ; i<queries.size() ; i++) {
            offlineQueries.push_back({queries[i][0],queries[i][1],i}); // {ai,xi,i}
        }
        sort(begin(offlineQueries),end(offlineQueries),cmp); // O(Q log Q)

        int idx = 0;
        Trie trie;
        //  O(Q*32 + N*32)
        for(int i=0 ; i<offlineQueries.size() ; i++) {
            int ai = offlineQueries[i][0]; // query is of type [ai,xi]
            int xi = offlineQueries[i][1];
            int queryIdx = offlineQueries[i][2];

            while(idx<nums.size() && nums[idx]<=xi) {
                trie.insert(nums[idx]);
                idx++;
            }

            if(idx == 0) ans[queryIdx] = -1;
            else ans[queryIdx] = trie.getMax(ai);
        }
        return ans;
    }
};
